apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: kdp:owner
  labels:
    rbac.kdp.k8c.io/display: "true"
  annotations:
    rbac.kdp.k8c.io/display-name: "Owner"
    rbac.kdp.k8c.io/description: "Grants unlimited access to manage all objects in the workspace"
    kdp.k8c.io/sync-to-workspaces: "*"
rules:
  - apiGroups: ["*"]
    resources: ["*"]
    verbs: ["*"]
  - nonResourceURLs: ["/"]
    verbs: ["access"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: kdp:services:manager
  labels:
    rbac.kdp.k8c.io/display: "true"
  annotations:
    rbac.kdp.k8c.io/display-name: "Service Manager"
    rbac.kdp.k8c.io/description: "Manage creation of services in the workspace"
    kdp.k8c.io/sync-to-workspaces: "*"
rules:
  - apiGroups: ["core.kdp.k8c.io"]
    resources: ["services"]
    verbs: ["get", "list", "watch", "create", "update", "patch", "delete"]
  - apiGroups: ["apis.kcp.io"]
    resources: ["apiexports", "apiresourceschemas"]
    verbs: ["get", "list", "watch"]
  # service managers should be able to bind their newly created service
  # in the same workspace.
  - apiGroups: ["apis.kcp.io"]
    resources: ["apiexports"]
    verbs: ["bind"]
  - apiGroups: ["apis.kcp.io"]
    resources: ["apibindings"]
    verbs: ["get", "list", "watch", "create", "update", "patch", "delete"]
  # to create a service, people need to be able to upload a ConfigMap
  # containing the service logo.
  - apiGroups: [""]
    resources: ["configmaps"]
    verbs: ["get", "list", "watch", "create", "update", "patch", "delete"]
  # after creating a service, service managers need to be able to download
  # the kubeconfig generated for the service.
  # TODO(embik): This probably has to be more granular in the future. It
  # allows access to *all* secrets right now.
  - apiGroups: [""]
    resources: ["secrets"]
    verbs: ["get", "list", "watch"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: kdp:services:viewer
  labels:
    rbac.kdp.k8c.io/display: "true"
    rbac.kdp.k8c.io/aggregate-to-member: "true"
  annotations:
    rbac.kdp.k8c.io/display-name: "Service Viewer"
    rbac.kdp.k8c.io/description: "Read-only access to services registered in the workspace"
    kdp.k8c.io/sync-to-workspaces: "*"
rules:
  - apiGroups: ["core.kdp.k8c.io"]
    resources: ["services"]
    verbs: ["get", "list", "watch"]
  - apiGroups: ["apis.kcp.io"]
    resources: ["apiexports", "apiresourceschemas"]
    verbs: ["get", "list", "watch"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: kdp:namespaces:manager
  labels:
    rbac.kdp.k8c.io/display: "true"
    rbac.kdp.k8c.io/aggregate-to-developer: "true"
  annotations:
    rbac.kdp.k8c.io/display-name: "Namespaces Manager"
    rbac.kdp.k8c.io/description: "Manage namespaces and permissions within namespaces"
    kdp.k8c.io/sync-to-workspaces: "*"
rules:
  - apiGroups: [""]
    resources: ["namespaces"]
    verbs: ["get", "list", "watch", "create", "update", "patch", "delete"]
  - apiGroups: ["rbac.authorization.k8s.io"]
    resources: ["roles", "rolebindings"]
    verbs: ["get", "list", "watch", "create", "update", "patch", "delete"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: kdp:namespaces:viewer
  labels:
    rbac.kdp.k8c.io/display: "true"
    rbac.kdp.k8c.io/aggregate-to-member: "true"
  annotations:
    rbac.kdp.k8c.io/display-name: "Namespaces Viewer"
    rbac.kdp.k8c.io/description: "Read-only access to namespaces in the workspace"
    kdp.k8c.io/sync-to-workspaces: "*"
rules:
  - apiGroups: [""]
    resources: ["namespaces"]
    verbs: ["get", "list", "watch"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: kdp:workspaces:manager
  labels:
    rbac.kdp.k8c.io/display: "true"
  annotations:
    rbac.kdp.k8c.io/display-name: "Workspaces Manager"
    rbac.kdp.k8c.io/description: "Manage child workspaces in the workspace"
    kdp.k8c.io/sync-to-workspaces: "*"
rules:
  - apiGroups: ["tenancy.kcp.io"]
    resources: ["workspacetypes"]
    verbs: ["get", "list", "watch"]
  - apiGroups: ["tenancy.kcp.io"]
    resources: ["workspaces"]
    verbs: ["get", "list", "watch", "create", "update", "patch", "delete"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: kdp:workspaces:viewer
  labels:
    rbac.kdp.k8c.io/display: "true"
    rbac.kdp.k8c.io/aggregate-to-member: "true"
  annotations:
    rbac.kdp.k8c.io/display-name: "Child Workspaces Viewer"
    rbac.kdp.k8c.io/description: "Read-only access to child workspaces"
    kdp.k8c.io/sync-to-workspaces: "*"
rules:
  - apiGroups: ["tenancy.kcp.io"]
    resources: ["workspaces", "workspacetypes", "clusterworkspaces"]
    verbs: ["get", "list", "watch"]
---
# this ClusterRole allows users to access the workspace,
# satisfying the Workspace Content authorizer. It will be
# aggregated into the developer role. See for reference:
# https://docs.kcp.io/kcp/v0.22/concepts/authorization/#workspace-content-authorizer
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: kdp:member:access
  labels:
    rbac.kdp.k8c.io/aggregate-to-member: "true"
  annotations:
    kdp.k8c.io/sync-to-workspaces: "*"
rules:
  - nonResourceURLs: ["/"]
    verbs: ["access"]
  # allow everyone with access to a workspace to also list
  # APIBindings in the workspace to discover bound APIs.
  - apiGroups: ["apis.kcp.io"]
    resources: ["apibindings"]
    verbs: ["get", "list", "watch"]
  # everyone should be able to see who has permissions in
  # the workspace (for now, at least).
  - apiGroups: ["rbac.authorization.k8s.io"]
    resources: ["clusterroles", "clusterrolebindings"]
    verbs: ["get", "list", "watch"]
  # reading ConfigMaps is necessary for the service catalog
  # in the frontend to show service logos.
  - apiGroups: [""]
    resources: ["configmaps"]
    verbs: ["get", "list", "watch"]

---
# this ClusterRole will aggregate ClusterRoles created for 
# developers to manipulate resources provided by services.
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: kdp:developer
  labels:
    rbac.kdp.k8c.io/display: "true"
  annotations:
    rbac.kdp.k8c.io/display-name: "Developer"
    rbac.kdp.k8c.io/description: "Grants access to manage user-facing resources in the workspace. Does not include any permission or API management"
    kdp.k8c.io/sync-to-workspaces: "*"
aggregationRule:
  clusterRoleSelectors:
  - matchLabels:
      rbac.kdp.k8c.io/aggregate-to-developer: "true"
  - matchLabels:
      rbac.kdp.k8c.io/aggregate-to-member: "true"
rules: []
---
# this ClusterRole will aggregate ClusterRoles created for 
# organisation members. They have read-only permissions.
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: kdp:member
  labels:
    rbac.kdp.k8c.io/display: "true"
  annotations:
    rbac.kdp.k8c.io/display-name: "Member"
    rbac.kdp.k8c.io/description: "Basic membership in a workspace, allows ready-only access to basic infrastructure within the namespace (e.g. bound APIs)"
    kdp.k8c.io/sync-to-workspaces: "*"
aggregationRule:
  clusterRoleSelectors:
  - matchLabels:
      rbac.kdp.k8c.io/aggregate-to-member: "true"
rules: []
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: kdp:access:manager
  labels:
    rbac.kdp.k8c.io/display: "true"
  annotations:
    rbac.kdp.k8c.io/display-name: "Access Manager"
    rbac.kdp.k8c.io/description: "Grants ability to manage user permissions in the workspace. Note that an Access Manager needs to have the permissions they want to assign to others"
    kdp.k8c.io/sync-to-workspaces: "*"
aggregationRule:
  clusterRoleSelectors:
  - matchLabels:
      rbac.kdp.k8c.io/aggregate-to-member: "true"
  - matchLabels:
      rbac.kdp.k8c.io/aggregate-to-developer: "true"
  - matchLabels:
      rbac.kdp.k8c.io/aggregate-to-access-manager: "true"
rules: []
---
# This role is aggregated to kdp:access:manager.
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: kdp:access:manager:authz
  labels:
    rbac.kdp.k8c.io/aggregate-to-access-manager: "true"
  annotations:
    kdp.k8c.io/sync-to-workspaces: "*"
rules:
  - apiGroups: ["rbac.authorization.k8s.io"]
    resources: ["clusterroles", "clusterrolebindings"]
    verbs: ["get", "list", "watch", "create", "update", "patch", "delete"]
  - apiGroups: [""]
    resources: ["serviceaccounts"]
    verbs: ["get", "list", "watch", "create", "update", "patch", "delete"]
